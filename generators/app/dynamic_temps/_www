#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('<%= name %>:server');
var http = require('http');
var https = require('https');
var fs = require('fs');
var config    = require('config');
var models = require("../models");
var rabbit = config.get('rabbit');
var hub = require('hub');
var emitter = hub.emitter;

var dbconfig = config.get('<%= name %>.dbConfig');
var sslConfig = config.get('<%= name %>.https');
var sslConfig_options;
if(sslConfig.active){
  sslConfig_options = {
    key: fs.readFileSync(sslConfig.key),
    cert: fs.readFileSync(sslConfig.cert),
    requestCert: false,
    rejectUnauthorized: false
  };
}

/**
 * Get port from environment and store in Express.
 */

if(process.env.NODE_ENV == 'test'){
  var port = normalizePort('4000');
}
else if(process.env.NODE_ENV == 'production'){
  var port = normalizePort('5000');
}
else if(process.env.NODE_ENV == 'development'){
  var port = normalizePort(process.env.PORT || '3000');
}
else{
  var port = normalizePort(process.env.PORT || '3000');
}
console.log(port);
app.set('port', port);

/**
 * Create HTTP server.
 */

if(app.get('env') === 'development' || app.get('env') === 'test' || app.get('env') === 'production')
  var server = http.createServer(app);
else
var server = https.createServer(sslConfig_options, app);

/**
 * Listen on provided port, on all network interfaces.
 */

if(dbconfig.mysql.active == true){
  var open = require('amqplib').connect('amqp://' + rabbit.user + ':' + rabbit.password + '@' + rabbit.url);
  open.then(function(conn) {
    hub.rCon = conn;
    models.sequelize.sync()
      .then(function () {
        server.listen(port);
        server.on('error', onError);
        server.on('listening', onListening);
        console.log('going to emit');
        console.log(emitter.listeners('server_started'));
        emitter.emit('server_started');
      });
  });

}
else{
  var open = require('amqplib').connect('amqp://' + rabbit.user + ':' + rabbit.password + '@' + rabbit.url);
  open.then(function(conn){
    hub.rCon = conn;
    server.listen(port);
    server.on('error', onError);
    server.on('listening', onListening);
    console.log('going to emit');
    console.log(emitter.listeners('server_started'));
    emitter.emit('server_started');
  });
}



/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
